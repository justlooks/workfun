关于redis持久化

redis 可以使用两种方式进行持久化，rdb(快照方式)和AOF(追加文件方式)

持久化也可以被禁止，方法在配置中写入
save ""		#RDB方式
appendonly no   #AOF方式

两种方式可以同时存在，同时存在时redis会优先使用AOF方式

两者的优缺点如下
RDB:
优点
1,是用来备份的不错的方式，rdb文件是某个时间的快照
2,用来灾难恢复不错，只是简单的拷贝备份到redis服务器
3,rdb能让redis性能比较好，因为做快照的时候父进程只是fork子进程处理所有io操作
4,大数据集情况下，redis使用rdb启动速度快

缺点
1，在两次快照之间的数据会丢失
2, fork是耗时操作，如果这时系统比较忙，fork可能会比较慢，在fork的时候会造成redis无法响应client的请求，这个停顿无法避免

手动生成快照
SAVE命令手动同步生成快照，生产上不用，会阻塞客户端请求
BGSAVE 调用后台进程生成快照

问题
rdb持久化状态的监控--使用LASTSAVE命令监控最后持久化成功的时间

AOF
优点：
1,可以更好的持久化，出现故障时能够恢复到即时状态，如果设置 appendfsync为everysec则只会丢失1秒的数据
2,如果断电不会造成数据污染,即使只写了部分日志，也可以用redis-check-aof工具进行恢复
3,当AOF文件比较大的时候，redis会重写恢复当前数据集的最小命令集合到新文件，老文件继续append，所以不会有问题，如果都写完就切换到新文件中
4,AOF只是记录命令，如果不小心用flush命令清除数据，则可以删除再启动

缺点
1,因为记录的是命令，所以AOF文件比较大
2,某些fsync策略会比rdb慢，但是设置为每秒一次性能可以和RBD相当
3,有些命令可能在特定场景下会有bug导致AOF恢复的数据可能和原数据集不一致


建议
如果为了保证数据安全需要同时使用RBD和AOF,如果允许部分数据丢失可以只使用RBD,由于bug和快速恢复的原因最好不要单独使用AOF


使用BGREWRITEAOF命令，手动触发AOF文件重写进程,通过INFO命令的输出可以看重写的调度情况，如果已经有进程在执行重写则返回错误

备份
使用cron产生备份，hourly备份在一个目录，daily备份在另一个目录
